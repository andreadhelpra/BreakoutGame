#BlueJ class context
comment0.target=Model
comment0.text=\ The\ model\ represents\ all\ the\ actual\ content\ and\ functionality\ of\ the\ app\r\nFor\ Breakout,\ it\ manages\ all\ the\ game\ objects\ that\ the\ View\ needs\r\n(the\ bat,\ ball,\ bricks,\ and\ the\ score),\ provides\ methods\ to\ allow\ the\ Controller\r\nto\ move\ the\ bat\ (and\ a\ couple\ of\ other\ fucntions\ -\ change\ the\ speed\ or\ stop\ \r\nthe\ game),\ and\ runs\ a\ background\ process\ (a\ 'thread')\ that\ moves\ the\ ball\ \r\n\ every\ 20\ milliseconds\ and\ checks\ for\ collisions\ \r\n\ @param\ destroyedBricks\ it\ creates\ a\ Vector\ of\ invisible\ bricks\ and\ it\ is\ used\ for\ changing\ level\ once\ the\ size\ of\ it\r\n\ matches\ the\ size\ of\ the\ total\ bricks.\ Being\ a\ Vector\ instead\ of\ an\ ArrayList\ makes\ it\ 'thread-safe';\ \r\n\ therfore,\ there\ is\ no\ need\ to\ manually\ synchronize\ it.\r\n
comment1.params=w\ h
comment1.target=Model(int,\ int)
comment10.params=
comment10.target=java.lang.Boolean\ getGameRunning()
comment10.text=\ \r\n\ Return\ game\ running\ state\ \r\n
comment11.params=value
comment11.target=void\ setFast(java.lang.Boolean)
comment11.text=\ \r\n\ Change\ game\ speed\ -\ false\ is\ normal\ speed,\ true\ is\ fast\r\n
comment12.params=
comment12.target=void\ resetLevel()
comment12.text=\r\n\ @param\ level\ \r\n\ @return\ level\ resets\ to\ 1,\ it\ is\ used\ in\ the\ {@link\ \#updateGame()\ updateGame\ method}when\ the\ level\ is\ 2\ and\ either\ all\ life\ is\ lost\ \r\n\ or\ all\ the\ bricks\ are\ destroyed\ to\ go\ back\ to\ the\ first\ level.\r\n
comment13.params=
comment13.target=java.lang.Boolean\ getFast()
comment14.params=
comment14.target=GameObj\ getBat()
comment15.params=
comment15.target=GameObj\ getBall()
comment16.params=
comment16.target=java.util.ArrayList\ getBricks()
comment17.params=
comment17.target=int\ getLife()
comment18.params=
comment18.target=int\ getLevel()
comment19.params=
comment19.target=int\ getScore()
comment2.params=
comment2.target=void\ initialiseGame()
comment2.text=\r\n\r\n\ This\ method\ is\ first\ called\ by\ the\ {@link\ Main\#start(Stage\ window)\ Main}\ class\ but\ the\ objects\ do\ not\ display\ until\r\n\ the\ startGame\ method\ is\ called\ from\ the\ {@link\ View\#start(Stage\ window)\ View}\ when\ the\ start\ button\ is\ pressed\r\n
comment20.params=
comment20.target=java.util.Vector\ getDestroyedBricks()
comment21.params=
comment21.target=Sound\ getSound()
comment22.params=n
comment22.target=void\ addToScore(int)
comment23.params=direction
comment23.target=void\ moveBat(int)
comment3.params=
comment3.target=void\ firstLevel()
comment3.text=\r\n\ This\ method\ tells\ how\ and\ how\ many\ bricks\ should\ be\ displayed\ for\ the\ first\ level.\ It\ is\ separate\ from\ the\ initialiseGame\ method\ so\ that\ it\ can\ be\ modified\ more\ easily.\r\n
comment4.params=
comment4.target=void\ secondLevel()
comment4.text=\r\n\ method\ that\ tells\ how\ and\ how\ many\ bricks\ should\ be\ displayed\ for\ the\ second\ level.\r\n
comment5.params=
comment5.target=void\ startGame()
comment5.text=\ \r\n\ Start\ the\ animation\ thread\r\n
comment6.params=
comment6.target=void\ runGame()
comment6.text=\r\n\ The\ main\ animation\ loop\r\n
comment7.params=
comment7.target=void\ updateGame()
comment7.text=\r\n\ It\ first\ updates\ the\ position\ of\ the\ objects\ and\ their\ possible\ hits,\ then\ it\ deals\ with\ life\ and\ levels.\r\n\ \ @param\ destroyedBricks\ a\ variable\ used\ to\ count\ all\ the\ bricks\ that\ are\ being\ destroyed.\r\n\ \ Once\ this\ reaches\ the\ same\ amount\ of\ the\ total\ bricks\ initially\ displayed\ a\ switch\ statement\ is\ activated\ to\ deal\ with\ what\ the\ game\ is\ going\ to\ do\ next.\r\n\ \ @param\ lastScore\ the\ score\ reached\ once\ the\ first\ level\ is\ finished.\ It\ is\ going\ to\ be\ the\ starting\ score\ for\ level\ 2,\ even\ when\ this\ is\ restarted.\r\n\ \ This\ is\ done\ by\ the\ {@link\ \#initialiseGame()\ initialiseGame\ method}\ \ \r\n
comment8.params=
comment8.target=void\ modelChanged()
comment8.text=\ This\ is\ how\ the\ Model\ talks\ to\ the\ View\r\n\ Whenever\ the\ Model\ changes,\ this\ method\ calls\ the\ update\ method\ in\r\n\ the\ View.\ It\ needs\ to\ run\ in\ the\ JavaFX\ event\ thread,\ and\ Platform.runLater\ \r\n\ is\ a\ utility\ that\ makes\ sure\ this\ happens\ even\ if\ called\ from\ the\ runGame\ thread\r\n
comment9.params=value
comment9.target=void\ setGameRunning(java.lang.Boolean)
comment9.text=\r\n\ Change\ game\ running\ state\ -\ set\ to\ false\ to\ stop\ the\ game\r\n
numComments=24
